# Generated by Django 5.1 on 2025-06-26 07:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IncidentApproval",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("IncidentId", models.IntegerField()),
                ("version", models.CharField(max_length=45)),
                ("ExtractedInfo", models.JSONField(null=True)),
                ("AssigneeId", models.CharField(max_length=45, null=True)),
                ("ReviewerId", models.CharField(max_length=45, null=True)),
                ("ApprovedRejected", models.CharField(max_length=45, null=True)),
                ("Date", models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                "db_table": "incident_approval",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RiskApproval",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("RiskInstanceId", models.IntegerField()),
                ("version", models.CharField(max_length=45)),
                ("ExtractedInfo", models.JSONField(null=True)),
                ("UserId", models.CharField(max_length=45, null=True)),
                ("ApproverId", models.CharField(max_length=45, null=True)),
                ("ApprovedRejected", models.CharField(max_length=45, null=True)),
                ("Date", models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                "db_table": "grc.risk_approval",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RiskInstance",
            fields=[
                ("RiskInstanceId", models.AutoField(primary_key=True, serialize=False)),
                ("RiskId", models.IntegerField(null=True)),
                ("IncidentId", models.IntegerField(null=True)),
                ("ComplianceId", models.IntegerField(null=True)),
                ("RiskTitle", models.TextField(null=True)),
                ("Criticality", models.CharField(max_length=100, null=True)),
                ("PossibleDamage", models.TextField(null=True)),
                ("Category", models.CharField(max_length=100, null=True)),
                ("Appetite", models.CharField(max_length=50, null=True)),
                ("RiskDescription", models.TextField(null=True)),
                ("RiskLikelihood", models.FloatField(null=True)),
                ("RiskImpact", models.FloatField(null=True)),
                ("RiskExposureRating", models.FloatField(null=True)),
                ("RiskPriority", models.CharField(max_length=50, null=True)),
                ("RiskResponseType", models.CharField(max_length=100, null=True)),
                ("RiskResponseDescription", models.TextField(null=True)),
                ("RiskMitigation", models.JSONField(blank=True, null=True)),
                ("RiskType", models.TextField(null=True)),
                ("RiskOwner", models.CharField(max_length=255, null=True)),
                ("Reviewer", models.CharField(max_length=255, null=True)),
                ("ReportedBy", models.IntegerField(null=True)),
                ("BusinessImpact", models.TextField(null=True)),
                ("Origin", models.CharField(max_length=50, null=True)),
                ("UserId", models.IntegerField(null=True)),
                ("MitigationDueDate", models.DateField(null=True)),
                ("ModifiedMitigations", models.JSONField(null=True)),
                ("MitigationCompletedDate", models.DateField(null=True)),
                ("ReviewerCount", models.IntegerField(null=True)),
                ("RiskFormDetails", models.JSONField(blank=True, null=True)),
                ("RecurrenceCount", models.IntegerField(default=1, null=True)),
                ("CreatedAt", models.DateField(auto_now_add=True)),
                ("FirstResponseAt", models.DateField(null=True)),
                (
                    "RiskStatus",
                    models.CharField(
                        choices=[
                            ("Not Assigned", "Not Assigned"),
                            ("Assigned", "Assigned"),
                            ("Approved", "Approved"),
                            ("Rejected", "Rejected"),
                        ],
                        default="Not Assigned",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "MitigationStatus",
                    models.CharField(
                        choices=[
                            ("Yet to Start", "Yet to Start"),
                            ("Work In Progress", "Work In Progress"),
                            (
                                "Revision Required by Reviewer",
                                "Revision Required by Reviewer",
                            ),
                            ("Revision Required by User", "Revision Required by User"),
                            ("Completed", "Completed"),
                        ],
                        default="Yet to Start",
                        max_length=45,
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "risk_instance",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CategoryBusinessUnit",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("source", models.CharField(max_length=50)),
                ("value", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "categoryunit",
            },
        ),
        migrations.CreateModel(
            name="ExportTask",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("export_data", models.JSONField(blank=True, null=True)),
                ("file_type", models.CharField(max_length=10)),
                ("user_id", models.CharField(max_length=100)),
                ("s3_url", models.CharField(blank=True, max_length=255, null=True)),
                ("file_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error", models.TextField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "exported_files",
            },
        ),
        migrations.CreateModel(
            name="Framework",
            fields=[
                ("FrameworkId", models.AutoField(primary_key=True, serialize=False)),
                ("FrameworkName", models.CharField(max_length=255)),
                ("CurrentVersion", models.FloatField(default=1.0)),
                ("FrameworkDescription", models.TextField()),
                ("EffectiveDate", models.DateField(blank=True, null=True)),
                ("CreatedByName", models.CharField(max_length=255)),
                ("CreatedByDate", models.DateField()),
                ("Category", models.CharField(blank=True, max_length=100, null=True)),
                ("DocURL", models.CharField(blank=True, max_length=255, null=True)),
                ("Identifier", models.CharField(blank=True, max_length=45, null=True)),
                ("StartDate", models.DateField(blank=True, null=True)),
                ("EndDate", models.DateField(blank=True, null=True)),
                ("Status", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "ActiveInactive",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                ("Reviewer", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "frameworks",
            },
        ),
        migrations.CreateModel(
            name="GRCLog",
            fields=[
                ("LogId", models.AutoField(primary_key=True, serialize=False)),
                ("Timestamp", models.DateTimeField(auto_now_add=True)),
                ("UserId", models.CharField(max_length=50, null=True)),
                ("UserName", models.CharField(max_length=100, null=True)),
                ("Module", models.CharField(max_length=100, null=True)),
                ("ActionType", models.CharField(max_length=50, null=True)),
                ("EntityId", models.CharField(max_length=50, null=True)),
                ("EntityType", models.CharField(max_length=50, null=True)),
                ("LogLevel", models.CharField(default="INFO", max_length=20)),
                ("Description", models.TextField(null=True)),
                ("IPAddress", models.CharField(max_length=45, null=True)),
                ("AdditionalInfo", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "grc_logs",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("recipient", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=100)),
                ("channel", models.CharField(max_length=20)),
                ("success", models.BooleanField()),
                ("error", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "notifications",
            },
        ),
        migrations.CreateModel(
            name="Risk",
            fields=[
                ("RiskId", models.AutoField(primary_key=True, serialize=False)),
                ("ComplianceId", models.IntegerField(null=True)),
                ("RiskTitle", models.CharField(max_length=50, null=True)),
                ("Criticality", models.TextField(null=True)),
                ("PossibleDamage", models.TextField(null=True)),
                ("Category", models.CharField(max_length=100, null=True)),
                ("RiskType", models.CharField(max_length=50, null=True)),
                ("BusinessImpact", models.CharField(max_length=50, null=True)),
                ("RiskPriority", models.CharField(max_length=50, null=True)),
                ("RiskDescription", models.TextField(null=True)),
                ("RiskLikelihood", models.IntegerField(null=True)),
                ("RiskImpact", models.IntegerField(null=True)),
                (
                    "RiskExposureRating",
                    models.DecimalField(decimal_places=2, max_digits=4, null=True),
                ),
                ("RiskMitigation", models.TextField(null=True)),
                ("CreatedAt", models.DateField(auto_now_add=True)),
            ],
            options={
                "db_table": "risk",
            },
        ),
        migrations.CreateModel(
            name="S3File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.TextField()),
                ("file_type", models.CharField(blank=True, max_length=50, null=True)),
                ("file_name", models.CharField(blank=True, max_length=255, null=True)),
                ("user_id", models.CharField(blank=True, max_length=100, null=True)),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "s3_files",
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                ("UserId", models.AutoField(primary_key=True, serialize=False)),
                ("UserName", models.CharField(max_length=255)),
                ("Password", models.CharField(max_length=255)),
                ("CreatedAt", models.DateTimeField(auto_now_add=True)),
                ("UpdatedAt", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=100)),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="AuditVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("AuditId", models.IntegerField()),
                ("Version", models.CharField(max_length=45)),
                ("ExtractedInfo", models.JSONField()),
                ("UserId", models.IntegerField()),
                (
                    "ApprovedRejected",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                ("Date", models.DateTimeField(auto_now_add=True)),
                ("ActiveInactive", models.CharField(default="1", max_length=1)),
            ],
            options={
                "db_table": "audit_version",
                "unique_together": {("AuditId", "Version")},
            },
        ),
        migrations.CreateModel(
            name="FrameworkApproval",
            fields=[
                ("ApprovalId", models.AutoField(primary_key=True, serialize=False)),
                ("ExtractedData", models.JSONField(blank=True, null=True)),
                ("UserId", models.IntegerField()),
                ("ReviewerId", models.IntegerField(blank=True, null=True)),
                ("Version", models.CharField(blank=True, max_length=50, null=True)),
                ("ApprovedNot", models.BooleanField(null=True)),
                ("ApprovedDate", models.DateField(blank=True, null=True)),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
            ],
            options={
                "db_table": "frameworkapproval",
            },
        ),
        migrations.CreateModel(
            name="FrameworkVersion",
            fields=[
                ("VersionId", models.AutoField(primary_key=True, serialize=False)),
                ("Version", models.FloatField()),
                ("FrameworkName", models.CharField(max_length=255)),
                ("CreatedBy", models.CharField(max_length=255)),
                ("CreatedDate", models.DateField()),
                ("PreviousVersionId", models.IntegerField(blank=True, null=True)),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
            ],
            options={
                "db_table": "frameworkversions",
            },
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[
                ("PolicyId", models.AutoField(primary_key=True, serialize=False)),
                ("CurrentVersion", models.CharField(default="1.0", max_length=20)),
                ("Status", models.CharField(max_length=50)),
                ("PolicyDescription", models.TextField()),
                ("PolicyName", models.CharField(max_length=255)),
                ("StartDate", models.DateField()),
                ("EndDate", models.DateField(blank=True, null=True)),
                ("Department", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "CreatedByName",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("CreatedByDate", models.DateField(blank=True, null=True)),
                (
                    "Applicability",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("DocURL", models.CharField(blank=True, max_length=255, null=True)),
                ("Scope", models.TextField(blank=True, null=True)),
                ("Objective", models.TextField(blank=True, null=True)),
                ("Identifier", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "PermanentTemporary",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                (
                    "ActiveInactive",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                ("CoverageRate", models.FloatField(blank=True, null=True)),
                (
                    "AcknowledgedUserIds",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("AcknowledgementCount", models.IntegerField(default=0)),
                ("PolicyType", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "PolicyCategory",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "PolicySubCategory",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("Reviewer", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
            ],
            options={
                "db_table": "policies",
            },
        ),
        migrations.CreateModel(
            name="Audit",
            fields=[
                ("AuditId", models.AutoField(primary_key=True, serialize=False)),
                ("Title", models.CharField(blank=True, max_length=255, null=True)),
                ("Scope", models.TextField(blank=True, null=True)),
                ("Objective", models.TextField(blank=True, null=True)),
                (
                    "BusinessUnit",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("Role", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "Responsibility",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("DueDate", models.DateField()),
                ("Frequency", models.IntegerField(null=True)),
                ("Status", models.CharField(max_length=45)),
                ("CompletionDate", models.DateTimeField(null=True)),
                ("ReviewStatus", models.CharField(max_length=45, null=True)),
                ("ReviewerComments", models.CharField(max_length=255, null=True)),
                ("AuditType", models.CharField(max_length=1)),
                ("Evidence", models.TextField(blank=True, null=True)),
                ("Comments", models.TextField(blank=True, null=True)),
                (
                    "AssignedDate",
                    models.DateTimeField(db_column="AssignedDate", null=True),
                ),
                ("Reports", models.JSONField(blank=True, null=True)),
                ("ReviewStartDate", models.DateTimeField(null=True)),
                ("ReviewDate", models.DateTimeField(null=True)),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
                (
                    "PolicyId",
                    models.ForeignKey(
                        db_column="PolicyId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.policy",
                    ),
                ),
            ],
            options={
                "db_table": "audit",
            },
        ),
        migrations.CreateModel(
            name="PolicyApproval",
            fields=[
                ("ApprovalId", models.AutoField(primary_key=True, serialize=False)),
                ("Identifier", models.CharField(db_column="Identifier", max_length=45)),
                ("ExtractedData", models.JSONField(blank=True, null=True)),
                ("UserId", models.IntegerField()),
                ("ReviewerId", models.IntegerField()),
                ("Version", models.CharField(blank=True, max_length=50, null=True)),
                ("ApprovedNot", models.BooleanField(null=True)),
                ("ApprovedDate", models.DateField(blank=True, null=True)),
                ("ApprovalDueDate", models.DateField(blank=True, null=True)),
                (
                    "PolicyId",
                    models.ForeignKey(
                        blank=True,
                        db_column="PolicyId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.policy",
                    ),
                ),
            ],
            options={
                "db_table": "policyapproval",
            },
        ),
        migrations.CreateModel(
            name="PolicyCategory",
            fields=[
                ("Id", models.AutoField(primary_key=True, serialize=False)),
                ("PolicyType", models.CharField(max_length=255)),
                ("PolicyCategory", models.CharField(max_length=255)),
                ("PolicySubCategory", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "policycategories",
                "unique_together": {
                    ("PolicyType", "PolicyCategory", "PolicySubCategory")
                },
            },
        ),
        migrations.CreateModel(
            name="PolicyVersion",
            fields=[
                ("VersionId", models.AutoField(primary_key=True, serialize=False)),
                ("Version", models.CharField(max_length=20)),
                ("PolicyName", models.CharField(max_length=255)),
                ("CreatedBy", models.CharField(max_length=255)),
                ("CreatedDate", models.DateField()),
                ("PreviousVersionId", models.IntegerField(blank=True, null=True)),
                (
                    "PolicyId",
                    models.ForeignKey(
                        db_column="PolicyId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.policy",
                    ),
                ),
            ],
            options={
                "db_table": "policyversions",
            },
        ),
        migrations.CreateModel(
            name="RBAC",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "user_id",
                    models.IntegerField(
                        db_index=True, help_text="Foreign key to Users table"
                    ),
                ),
                (
                    "email",
                    models.EmailField(help_text="User email address", max_length=255),
                ),
                (
                    "role",
                    models.CharField(
                        db_index=True, help_text="User's assigned role", max_length=100
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="User's department",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "entity",
                    models.CharField(
                        blank=True,
                        help_text="User's business entity",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "policy_create",
                    models.BooleanField(default=False, help_text="Can create policies"),
                ),
                (
                    "policy_view",
                    models.BooleanField(default=False, help_text="Can view policies"),
                ),
                (
                    "policy_edit",
                    models.BooleanField(default=False, help_text="Can edit policies"),
                ),
                (
                    "policy_approve",
                    models.BooleanField(
                        default=False, help_text="Can approve policies"
                    ),
                ),
                (
                    "policy_delete",
                    models.BooleanField(default=False, help_text="Can delete policies"),
                ),
                (
                    "policy_assign",
                    models.BooleanField(default=False, help_text="Can assign policies"),
                ),
                (
                    "compliance_create",
                    models.BooleanField(
                        default=False, help_text="Can create compliance items"
                    ),
                ),
                (
                    "compliance_view",
                    models.BooleanField(
                        default=False, help_text="Can view compliance items"
                    ),
                ),
                (
                    "compliance_edit",
                    models.BooleanField(
                        default=False, help_text="Can edit compliance items"
                    ),
                ),
                (
                    "compliance_approve",
                    models.BooleanField(
                        default=False, help_text="Can approve compliance items"
                    ),
                ),
                (
                    "compliance_delete",
                    models.BooleanField(
                        default=False, help_text="Can delete compliance items"
                    ),
                ),
                (
                    "compliance_assign",
                    models.BooleanField(
                        default=False, help_text="Can assign compliance items"
                    ),
                ),
                (
                    "audit_create",
                    models.BooleanField(default=False, help_text="Can create audits"),
                ),
                (
                    "audit_view",
                    models.BooleanField(default=False, help_text="Can view audits"),
                ),
                (
                    "audit_edit",
                    models.BooleanField(default=False, help_text="Can edit audits"),
                ),
                (
                    "audit_approve",
                    models.BooleanField(default=False, help_text="Can approve audits"),
                ),
                (
                    "audit_delete",
                    models.BooleanField(default=False, help_text="Can delete audits"),
                ),
                (
                    "audit_assign",
                    models.BooleanField(default=False, help_text="Can assign audits"),
                ),
                (
                    "risk_create",
                    models.BooleanField(default=False, help_text="Can create risks"),
                ),
                (
                    "risk_view",
                    models.BooleanField(default=False, help_text="Can view risks"),
                ),
                (
                    "risk_edit",
                    models.BooleanField(default=False, help_text="Can edit risks"),
                ),
                (
                    "risk_approve",
                    models.BooleanField(default=False, help_text="Can approve risks"),
                ),
                (
                    "risk_delete",
                    models.BooleanField(default=False, help_text="Can delete risks"),
                ),
                (
                    "risk_assign",
                    models.BooleanField(default=False, help_text="Can assign risks"),
                ),
                (
                    "incident_create",
                    models.BooleanField(
                        default=False, help_text="Can create incidents"
                    ),
                ),
                (
                    "incident_view",
                    models.BooleanField(default=False, help_text="Can view incidents"),
                ),
                (
                    "incident_edit",
                    models.BooleanField(default=False, help_text="Can edit incidents"),
                ),
                (
                    "incident_approve",
                    models.BooleanField(
                        default=False, help_text="Can approve incidents"
                    ),
                ),
                (
                    "incident_delete",
                    models.BooleanField(
                        default=False, help_text="Can delete incidents"
                    ),
                ),
                (
                    "incident_assign",
                    models.BooleanField(
                        default=False, help_text="Can assign incidents"
                    ),
                ),
                (
                    "dept_grc",
                    models.BooleanField(
                        default=False, help_text="Can access GRC department"
                    ),
                ),
                (
                    "dept_policy",
                    models.BooleanField(
                        default=False, help_text="Can access Policy department"
                    ),
                ),
                (
                    "dept_compliance",
                    models.BooleanField(
                        default=False, help_text="Can access Compliance department"
                    ),
                ),
                (
                    "dept_audit",
                    models.BooleanField(
                        default=False, help_text="Can access Audit department"
                    ),
                ),
                (
                    "dept_risk",
                    models.BooleanField(
                        default=False, help_text="Can access Risk department"
                    ),
                ),
                (
                    "dept_incident",
                    models.BooleanField(
                        default=False, help_text="Can access Incident department"
                    ),
                ),
                (
                    "dept_management",
                    models.BooleanField(
                        default=False, help_text="Can access Management department"
                    ),
                ),
                (
                    "dept_general",
                    models.BooleanField(
                        default=False, help_text="Can access General department"
                    ),
                ),
                (
                    "entity_corporate",
                    models.BooleanField(
                        default=False, help_text="Can access Corporate entity"
                    ),
                ),
                (
                    "entity_test",
                    models.BooleanField(
                        default=False, help_text="Can access Test entity"
                    ),
                ),
                (
                    "entity_internal",
                    models.BooleanField(
                        default=False, help_text="Can access Internal entity"
                    ),
                ),
                (
                    "entity_external",
                    models.BooleanField(
                        default=False, help_text="Can access External entity"
                    ),
                ),
                (
                    "entity_north_america",
                    models.BooleanField(
                        default=False, help_text="Can access North America entity"
                    ),
                ),
                (
                    "entity_europe",
                    models.BooleanField(
                        default=False, help_text="Can access Europe entity"
                    ),
                ),
                (
                    "entity_asia_pacific",
                    models.BooleanField(
                        default=False, help_text="Can access Asia Pacific entity"
                    ),
                ),
                (
                    "can_view_all_departments",
                    models.BooleanField(
                        default=False, help_text="Can view all departments"
                    ),
                ),
                (
                    "can_view_all_entities",
                    models.BooleanField(
                        default=False, help_text="Can view all entities"
                    ),
                ),
                (
                    "can_export_data",
                    models.BooleanField(default=False, help_text="Can export data"),
                ),
                (
                    "can_import_data",
                    models.BooleanField(default=False, help_text="Can import data"),
                ),
                (
                    "can_manage_users",
                    models.BooleanField(default=False, help_text="Can manage users"),
                ),
                (
                    "can_view_reports",
                    models.BooleanField(default=False, help_text="Can view reports"),
                ),
                (
                    "can_create_reports",
                    models.BooleanField(default=False, help_text="Can create reports"),
                ),
                (
                    "can_approve_workflows",
                    models.BooleanField(
                        default=False, help_text="Can approve workflows"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this RBAC record active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
            ],
            options={
                "verbose_name": "RBAC Permission",
                "verbose_name_plural": "RBAC Permissions",
                "db_table": "rbac",
                "indexes": [
                    models.Index(fields=["user_id"], name="rbac_user_id_d23577_idx"),
                    models.Index(fields=["email"], name="rbac_email_a36f6c_idx"),
                    models.Index(fields=["role"], name="rbac_role_bddafd_idx"),
                    models.Index(fields=["department"], name="rbac_departm_edd42f_idx"),
                    models.Index(fields=["entity"], name="rbac_entity_30964c_idx"),
                    models.Index(fields=["is_active"], name="rbac_is_acti_27d5b5_idx"),
                    models.Index(
                        fields=["user_id", "is_active"], name="rbac_user_id_1dfd07_idx"
                    ),
                ],
                "unique_together": {("user_id",)},
            },
        ),
        migrations.CreateModel(
            name="RiskAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("assigned_date", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_assignments_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "risk",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="grc.risk",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubPolicy",
            fields=[
                ("SubPolicyId", models.AutoField(primary_key=True, serialize=False)),
                ("SubPolicyName", models.CharField(max_length=255)),
                ("CreatedByName", models.CharField(max_length=255)),
                ("CreatedByDate", models.DateField()),
                ("Identifier", models.CharField(max_length=45)),
                ("Description", models.TextField()),
                ("Status", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "PermanentTemporary",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("Control", models.TextField(blank=True, null=True)),
                (
                    "PolicyId",
                    models.ForeignKey(
                        db_column="PolicyId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.policy",
                    ),
                ),
            ],
            options={
                "db_table": "subpolicies",
            },
        ),
        migrations.CreateModel(
            name="Compliance",
            fields=[
                ("ComplianceId", models.AutoField(primary_key=True, serialize=False)),
                (
                    "ComplianceTitle",
                    models.CharField(blank=True, max_length=145, null=True),
                ),
                ("ComplianceItemDescription", models.TextField(blank=True, null=True)),
                (
                    "ComplianceType",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("Scope", models.TextField(blank=True, null=True)),
                ("Objective", models.TextField(blank=True, null=True)),
                (
                    "BusinessUnitsCovered",
                    models.CharField(blank=True, max_length=225, null=True),
                ),
                ("IsRisk", models.BooleanField(blank=True, null=True)),
                ("PossibleDamage", models.TextField(blank=True, null=True)),
                ("mitigation", models.TextField(blank=True, null=True)),
                ("Criticality", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "MandatoryOptional",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "ManualAutomatic",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("Impact", models.CharField(blank=True, max_length=50, null=True)),
                ("Probability", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "MaturityLevel",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Initial", "Initial"),
                            ("Developing", "Developing"),
                            ("Defined", "Defined"),
                            ("Managed", "Managed"),
                            ("Optimizing", "Optimizing"),
                        ],
                        default="Initial",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "ActiveInactive",
                    models.CharField(
                        blank=True, default="Inactive", max_length=45, null=True
                    ),
                ),
                (
                    "PermanentTemporary",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                (
                    "CreatedByName",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                ("CreatedByDate", models.DateField(blank=True, null=True)),
                ("ComplianceVersion", models.CharField(max_length=50)),
                (
                    "Status",
                    models.CharField(
                        blank=True, default="Under Review", max_length=50, null=True
                    ),
                ),
                ("Identifier", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "Applicability",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                ("PotentialRiskScenarios", models.TextField(blank=True, null=True)),
                ("RiskType", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "RiskCategory",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                (
                    "RiskBusinessImpact",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                (
                    "PreviousComplianceVersionId",
                    models.ForeignKey(
                        blank=True,
                        db_column="PreviousComplianceVersionId",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_versions",
                        to="grc.compliance",
                    ),
                ),
                (
                    "SubPolicy",
                    models.ForeignKey(
                        db_column="SubPolicyId",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compliances",
                        to="grc.subpolicy",
                    ),
                ),
            ],
            options={
                "db_table": "compliance",
            },
        ),
        migrations.CreateModel(
            name="AuditReport",
            fields=[
                ("ReportId", models.AutoField(primary_key=True, serialize=False)),
                ("Report", models.TextField()),
                (
                    "AuditId",
                    models.ForeignKey(
                        db_column="AuditId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.audit",
                    ),
                ),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
                (
                    "PolicyId",
                    models.ForeignKey(
                        db_column="PolicyId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.policy",
                    ),
                ),
                (
                    "SubPolicyId",
                    models.ForeignKey(
                        db_column="SubPolicyId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.subpolicy",
                    ),
                ),
            ],
            options={
                "db_table": "audit_report",
            },
        ),
        migrations.AddField(
            model_name="audit",
            name="SubPolicyId",
            field=models.ForeignKey(
                db_column="SubPolicyId",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="grc.subpolicy",
            ),
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                ("IncidentId", models.AutoField(primary_key=True, serialize=False)),
                ("IncidentTitle", models.CharField(max_length=255)),
                ("Description", models.TextField()),
                ("Mitigation", models.JSONField(blank=True, null=True)),
                ("Date", models.DateField()),
                ("Time", models.TimeField()),
                ("Origin", models.CharField(max_length=50)),
                ("Comments", models.TextField(blank=True, null=True)),
                (
                    "RiskCategory",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "RiskPriority",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("Attachments", models.TextField(blank=True, null=True)),
                ("CreatedAt", models.DateTimeField(auto_now_add=True)),
                ("Status", models.CharField(blank=True, max_length=45, null=True)),
                ("IdentifiedAt", models.DateTimeField(blank=True, null=True)),
                ("RepeatedNot", models.BooleanField(blank=True, null=True)),
                (
                    "CostOfIncident",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                ("ReopenedNot", models.BooleanField(blank=True, null=True)),
                (
                    "RejectionSource",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("INCIDENT", "Rejected as Incident"),
                            ("RISK", "Rejected from Risk"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "AffectedBusinessUnit",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("SystemsAssetsInvolved", models.TextField(blank=True, null=True)),
                (
                    "GeographicLocation",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("Criticality", models.CharField(blank=True, max_length=20, null=True)),
                ("InitialImpactAssessment", models.TextField(blank=True, null=True)),
                ("InternalContacts", models.TextField(blank=True, null=True)),
                ("ExternalPartiesInvolved", models.TextField(blank=True, null=True)),
                ("RegulatoryBodies", models.TextField(blank=True, null=True)),
                (
                    "RelevantPoliciesProceduresViolated",
                    models.TextField(blank=True, null=True),
                ),
                ("ControlFailures", models.TextField(blank=True, null=True)),
                ("LessonsLearned", models.TextField(blank=True, null=True)),
                (
                    "IncidentClassification",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("PossibleDamage", models.TextField(blank=True, null=True)),
                ("AssignerId", models.IntegerField(blank=True, null=True)),
                ("ReviewerId", models.IntegerField(blank=True, null=True)),
                ("MitigationDueDate", models.DateTimeField(blank=True, null=True)),
                ("AssignedDate", models.DateTimeField(blank=True, null=True)),
                ("AssignmentNotes", models.TextField(blank=True, null=True)),
                ("IncidentFormDetails", models.JSONField(blank=True, null=True)),
                (
                    "MitigationCompletedDate",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "AuditId",
                    models.ForeignKey(
                        blank=True,
                        db_column="AuditId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.audit",
                    ),
                ),
                (
                    "ComplianceId",
                    models.ForeignKey(
                        blank=True,
                        db_column="ComplianceId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.compliance",
                    ),
                ),
                (
                    "UserId",
                    models.ForeignKey(
                        blank=True,
                        db_column="UserId",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.users",
                    ),
                ),
            ],
            options={
                "db_table": "incidents",
            },
        ),
        migrations.CreateModel(
            name="AuditFinding",
            fields=[
                (
                    "AuditFindingsId",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("Evidence", models.TextField()),
                (
                    "Check",
                    models.CharField(
                        choices=[
                            ("0", "Not Started"),
                            ("1", "In Progress"),
                            ("2", "Completed"),
                            ("3", "Not Applicable"),
                        ],
                        default="0",
                        max_length=1,
                    ),
                ),
                (
                    "MajorMinor",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0", "Minor"),
                            ("1", "Major"),
                            ("2", "Not Applicable"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("HowToVerify", models.TextField(blank=True, null=True)),
                ("Impact", models.TextField(blank=True, null=True)),
                ("Recommendation", models.TextField(blank=True, null=True)),
                ("DetailsOfFinding", models.TextField(blank=True, null=True)),
                ("Comments", models.TextField(blank=True, null=True)),
                ("CheckedDate", models.DateTimeField(blank=True, null=True)),
                ("AssignedDate", models.DateTimeField()),
                (
                    "AuditId",
                    models.ForeignKey(
                        db_column="AuditId",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="findings",
                        to="grc.audit",
                    ),
                ),
                (
                    "ComplianceId",
                    models.ForeignKey(
                        db_column="ComplianceId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.compliance",
                    ),
                ),
                (
                    "UserId",
                    models.ForeignKey(
                        db_column="UserId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.users",
                    ),
                ),
            ],
            options={
                "db_table": "audit_findings",
            },
        ),
        migrations.AddField(
            model_name="audit",
            name="Assignee",
            field=models.ForeignKey(
                db_column="assignee",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignee",
                to="grc.users",
            ),
        ),
        migrations.AddField(
            model_name="audit",
            name="Auditor",
            field=models.ForeignKey(
                db_column="auditor",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="auditor",
                to="grc.users",
            ),
        ),
        migrations.AddField(
            model_name="audit",
            name="Reviewer",
            field=models.ForeignKey(
                db_column="reviewer",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reviewer",
                to="grc.users",
            ),
        ),
        migrations.CreateModel(
            name="Workflow",
            fields=[
                ("Id", models.AutoField(primary_key=True, serialize=False)),
                ("AssignedAt", models.DateTimeField()),
                (
                    "AssigneeId",
                    models.ForeignKey(
                        db_column="assignee_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workflow_assignee",
                        to="grc.users",
                    ),
                ),
                (
                    "FindingId",
                    models.ForeignKey(
                        db_column="finding_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.auditfinding",
                    ),
                ),
                (
                    "IncidentId",
                    models.ForeignKey(
                        db_column="IncidentId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.incident",
                    ),
                ),
                (
                    "ReviewerId",
                    models.ForeignKey(
                        db_column="reviewer_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workflow_reviewer",
                        to="grc.users",
                    ),
                ),
            ],
            options={
                "db_table": "workflow",
            },
        ),
        migrations.CreateModel(
            name="LastChecklistItemVerified",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("ComplianceId", models.IntegerField()),
                ("SubPolicyId", models.IntegerField()),
                ("PolicyId", models.IntegerField()),
                ("Date", models.DateField()),
                ("Time", models.TimeField()),
                ("User", models.IntegerField()),
                ("Complied", models.CharField(max_length=1)),
                ("Comments", models.TextField(blank=True, null=True)),
                ("count", models.IntegerField()),
                (
                    "FrameworkId",
                    models.ForeignKey(
                        db_column="FrameworkId",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="grc.framework",
                    ),
                ),
            ],
            options={
                "db_table": "lastchecklistitemverified",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("Complied__in", ["0", "1"])),
                        name="complied_check",
                    )
                ],
            },
        ),
    ]
